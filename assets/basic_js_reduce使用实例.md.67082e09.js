import{o as n,c as s,e as a}from"./app.c30441d1.js";const p='{"title":"4 个JavaScript 中 array.reduce() 数组方法的使用实例","description":"","frontmatter":{},"relativePath":"basic/js/reduce使用实例.md","lastUpdated":1661330957043}',t={},o=[a('<h1 id="_4-个javascript-中-array-reduce-数组方法的使用实例">4 个JavaScript 中 array.reduce() 数组方法的使用实例</h1><p><img src="https://qn.huat.xyz/mac/20220724210903.jpeg" alt="图片"></p><p>英文 | <a href="https://javascript.plainenglish.io/4-practices-to-help-you-understand-array-reduce-f3138cfef095" target="_blank" rel="noopener noreferrer">https://javascript.plainenglish.io/4-practices-to-help-you-understand-array-reduce-f3138cfef095</a></p><p>翻译 | 杨小爱</p><p>Array.prototype.reduce() 是数组中最强大的方法之一，也是 JavaScript 函数式编程中一个吸引人的特性。但不幸的是，我发现很多朋友不习惯使用它。</p><p>今天请让我详细介绍一下这个方法，希望对你有帮助。</p><p>这是 reduce 的基本用法：</p><div class="language-js"><pre><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">parmar1<span class="token punctuation">,</span> parmar2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\narr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span>\n</code></pre></div><p>reduce是数组原型对象上的一个方法，可以帮助我们操作数组。它将另一个函数作为其参数，可以称为reducer。</p><p>reducer 有两个参数。第一个参数 param1 是最后一次 reducer 运行的结果。如果这是第一次运行 reducer，则 param1 的默认值是数组第一个元素的值。</p><p>reduce 方法循环遍历数组中的每个元素，就像在 for 循环中一样。并将循环中的当前值作为参数2。</p><p>遍历完数组，reduce会返回最后一个reducer计算的结果。</p><p>我们来看一个详细的例子。</p><div class="language-js"><pre><code>\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\narr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span>\n</code></pre></div><p><img src="https://qn.huat.xyz/mac/20220724210858.png" alt="图片"></p><p>接下来，我们来探索一下上面的代码是如何执行的。</p><p>在这段代码中，reducer 是 add 。</p><p>首先，因为我们是第一次执行add，所以数组中的第一个元素&#39;a&#39;会被当作add的第一个参数，然后循环会从数组的第二个元素&#39;b&#39;开始。这一次，&#39;b&#39; 是 add 的第二个参数。</p><p><img src="https://qn.huat.xyz/mac/20220724210915.png" alt="图片"></p><p>第一次计算后，我们得到结果&#39;ab&#39;。此结果将被缓存并在下一次添加计算中用作 param1。同时，数组中的第三个参数&#39;c&#39;将用作add的param2。</p><p><img src="https://qn.huat.xyz/mac/20220724210924.png" alt="图片"></p><p>同样，reduce 会继续遍历数组中的元素，运行 &#39;abc&#39; 和 &#39;d&#39; 作为 add 的参数。</p><p><img src="https://qn.huat.xyz/mac/20220724210931.png" alt="图片"></p><p>最后，遍历数组中最后一个元素后，返回计算结果。</p><p><img src="https://qn.huat.xyz/mac/20220724210939.png" alt="图片"></p><p>现在我们有了结果：&#39;abcde&#39;。</p><p>所以，我们可以看到reduce也是一种遍历数组的方式！它依次取数组中每个元素的值并执行reducer函数。</p><p>但我们可以看到，上面的循环并没有那种和谐的美感。因为我们把数组的第一个元素，也就是&#39;a&#39;作为初始的param1，然后从数组的第二个元素循环得到param2。</p><p>实际上，我们可以将reduce中的第二个参数指定为reducer函数的param1的初始值，这样param2就会从数组的第一个元素开始循环获取。</p><p>代码如下：</p><div class="language-js"><pre><code>\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\narr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token string">&#39;s&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p><img src="https://qn.huat.xyz/mac/20220724211007.png" alt="图片"></p><p>这一次，我们第一次调用reducer时将&#39;s&#39;作为param1，然后从第一个元素开始依次遍历数组。</p><p><img src="https://qn.huat.xyz/mac/20220724211016.png" alt="图片"></p><p>所以我们可以使用这个语法来重写我们的第一个代码片段。</p><div class="language-js"><pre><code>\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\narr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>接下来，我们将进入实际编程章节，体验reduce的强大威力。</p><p><strong>1、累加和累积乘法</strong></p><p>如果我们想得到数组中所有元素的总和，你会怎么做？</p><p>一般来说，你可能会这样写：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">accumulation</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    sum <span class="token operator">=</span> sum <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>当然，你可能还有其他的写法，但是只要使用for循环，代码就会显得多余。</p><p>那我们看看上面的累加函数是做什么的：</p><ul><li>将初始总和设置为零</li><li>取出数组中的第一个元素并求和</li><li>在 sum 中缓存上一步的结果</li><li>依次取出数组中的其他元素，进行上述操作</li><li>返回最终结果</li></ul><p>我们可以看到，当我们用文字描述上述步骤时，很明显它符合reduce的使用。所以我们可以使用reduce来重写上面的代码：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">accumulation</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x <span class="token operator">+</span> y\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>如果你习惯使用箭头函数，上面的代码看起来会更简洁：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">accumulation</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>一行代码搞定！</p><p><img src="https://qn.huat.xyz/mac/20220724211345.png" alt="图片"></p><p>当然，累积乘法和累加是完全一样的：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">multiplication</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>很多时候，我们在求和的时候需要加上一个权重，这样更能体现reduce的优雅。</p><div class="language-js"><pre><code><span class="token keyword">const</span> scores <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> score<span class="token operator">:</span> <span class="token number">90</span><span class="token punctuation">,</span> subject<span class="token operator">:</span> <span class="token string">&quot;HTML&quot;</span><span class="token punctuation">,</span> weight<span class="token operator">:</span> <span class="token number">0.2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> score<span class="token operator">:</span> <span class="token number">95</span><span class="token punctuation">,</span> subject<span class="token operator">:</span> <span class="token string">&quot;CSS&quot;</span><span class="token punctuation">,</span> weight<span class="token operator">:</span> <span class="token number">0.3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> score<span class="token operator">:</span> <span class="token number">85</span><span class="token punctuation">,</span> subject<span class="token operator">:</span> <span class="token string">&quot;JavaScript&quot;</span><span class="token punctuation">,</span> weight<span class="token operator">:</span> <span class="token number">0.5</span> <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> scores<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">.</span>score <span class="token operator">*</span> y<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 89</span>\n</code></pre></div><p><strong>2、获取一个数组的最大值和最小值</strong></p><p>如果要获取数组的最大值和最小值，可以这样写：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> ele <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>ele <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      max <span class="token operator">=</span> ele<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> max<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这和以前一样，如果我们使用reduce，我们可以在一行代码中完成。</p><div class="language-js"><pre><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3.24</span><span class="token punctuation">,</span> <span class="token number">2.78</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\narr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\narr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><img src="https://qn.huat.xyz/mac/20220724211559.png" alt="图片"></p><p><strong>3、计算数组中元素出现的频率</strong></p><p>我们经常需要统计数组中每个元素出现的次数。reduce 方法可以帮助我们实现这一点。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">countFrequency</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> ele</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// Judge whether this element has been counted before</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">/**\n        * If this element has been counted before,\n        * increase the frequency of its occurrence by 1\n        */</span>\n      result<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">/**\n        * If this element has not been counted before,\n        * set the frequency of its occurrence to 1\n        */</span>\n      result<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>注意，我们使用map对象而不是对象来存储统计后的频率，因为数组中的元素可能是对象类型，而对象的key只能是字符串或符号类型。</p><p>这里有两个例子：</p><p><img src="https://qn.huat.xyz/mac/20220724211624.png" alt="图片"></p><p><img src="https://qn.huat.xyz/mac/20220724211915.png" alt="图片"></p><p>同样，如果要统计字符串中每个字符出现的频率，可以先将字符串转换为字符数组，然后按照上面的方法。</p><div class="language-js"><pre><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;helloworld&#39;</span><span class="token punctuation">;</span>\n\nstr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> currentChar</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    result<span class="token punctuation">[</span>currentChar<span class="token punctuation">]</span> <span class="token operator">?</span> result<span class="token punctuation">[</span>currentChar<span class="token punctuation">]</span> <span class="token operator">++</span> <span class="token operator">:</span> result<span class="token punctuation">[</span>currentChar<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> result<span class="token punctuation">;</span>                           \n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><img src="https://qn.huat.xyz/mac/20220724211959.png" alt="图片"></p><p>因为字符类型可以用作对象的键，所以我们这里不使用 Map。</p><p><strong>4、多个数组的展平</strong></p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">Flat</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">:</span> v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><img src="https://qn.huat.xyz/mac/20220724212026.png" alt="图片"></p><p>通过reduce依次访问数组中的每个元素。如果我们发现元素还是一个数组，就递归调用 flat 方法。</p><p><strong>总结</strong></p><p>以上就是我今天跟你分享的4个关于数组reduce的用法，希望对你有所帮助。</p>',77)];t.render=function(a,p,t,c,e,u){return n(),s("div",null,o)};export default t;export{p as __pageData};
