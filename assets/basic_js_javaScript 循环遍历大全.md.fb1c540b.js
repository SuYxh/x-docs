import{o as n,c as s,e as a}from"./app.c30441d1.js";const p='{"title":"javaScript 循环遍历大全","description":"","frontmatter":{},"headers":[{"level":2,"title":"1、关于JS循环遍历","slug":"_1、关于js循环遍历"},{"level":2,"title":"2、while/do while循环","slug":"_2、while-do-while循环"},{"level":2,"title":"3、for循环","slug":"_3、for循环"},{"level":2,"title":"4、for…in","slug":"_4、for…in"},{"level":2,"title":"5、for…of","slug":"_5、for…of"},{"level":2,"title":"6、every/some","slug":"_6、every-some"},{"level":2,"title":"7、filter","slug":"_7、filter"},{"level":2,"title":"8、map","slug":"_8、map"},{"level":2,"title":"9、reduce","slug":"_9、reduce"},{"level":2,"title":"10.Object,keys遍历对象的属性","slug":"_10-object-keys遍历对象的属性"},{"level":2,"title":"11、Object.getOwnPropertyNames()  遍历对象的属性","slug":"_11、object-getownpropertynames-遍历对象的属性"},{"level":2,"title":"11、indexOf","slug":"_11、indexof"},{"level":2,"title":"12、循环特征（相同与不同）","slug":"_12、循环特征（相同与不同）"},{"level":2,"title":"13、总结","slug":"_13、总结"}],"relativePath":"basic/js/javaScript 循环遍历大全.md","lastUpdated":1661330957043}',t={},o=[a('<h1 id="javascript-循环遍历大全">javaScript 循环遍历大全</h1><h2 id="_1、关于js循环遍历"><strong>1、关于JS循环遍历</strong></h2><p>写下这篇文章的目的，主要是想总结一下关于JS对于集合对象遍历的方式方法，以及在实际应用场景中怎样去使用它们。本文会主要介绍：while,for,forEach,every,some,filter,reduce,map,indexOf…</p><h2 id="_2、while-do-while循环"><strong>2、while/do while循环</strong></h2><p>while、do while主要的功能是，当满足while后边所跟的条件时，来执行相关业务。这两个的区别是，while会先判断是否满足条件，然后再去执行花括号里面的任务，而do while则是先执行一次花括号中的任务，再去执行while条件，判断下次还是否再去执行do里面的操作。也就是说 <strong>do while至少会执行一次操作</strong>，生产中这个就可能用的比较少了，因为他与接下来要讲的for循环相比，个人觉得可读性上差了一点。</p><div class="language-js"><pre><code><span class="token keyword">while</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">{</span>\n     执行<span class="token operator">...</span>\n<span class="token punctuation">}</span>\n<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>\n<span class="token keyword">do</span><span class="token punctuation">{</span>\n    执行<span class="token operator">...</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">while</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span>\n</code></pre></div><h2 id="_3、for循环"><strong>3、for循环</strong></h2><p>普通for循环，经常用的数组遍历</p><div class="language-js"><pre><code><span class="token comment">// let arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>优化版for循环:使用变量，将长度缓存起来，避免重复获取长度，数组很大时优化效果明显</p><div class="language-javascript"><pre><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_4、for…in"><strong>4、for…in</strong></h2><p>for....in 是es5标准， 此方法遍历数组效率低，主要是用来循环遍历对象的属性</p><p>for…in的作用主要是去遍历对象的<strong>可枚举属性</strong>。即for-in是为遍历对象而设计的，不适用于遍历数组。</p><p>遍历数组的缺点：数组的下标index值是数字，for-in遍历的index值&quot;0&quot;,&quot;1&quot;,&quot;2&quot;等是字符串</p><div class="language-js"><pre><code> <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span>\n    sex<span class="token operator">:</span> <span class="token string">&#39;male&#39;</span>\n<span class="token punctuation">}</span>\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> value <span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> a <span class="token keyword">in</span> foo<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">可枚举属性：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">age属性：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>foo<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre></div><p>因为Object.defineProperty，建立的属性，默认不可枚举，因此在浏览器中打印的结果为：</p><p><img src="https://qn.huat.xyz/mac/20220822124413.jpeg" alt="img"></p><p>在JS当中，数组也算作对象，但一般不推荐把for…in用在数组遍历上面，如果for…in普通数组的话，a返回数组的索引。</p><p><strong>增强for…in循环：</strong></p><div class="language-js"><pre><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span> \n \n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;键名：&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;键值：&#39;</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n<span class="token comment">// 键名：a   //键值：1             //键名：b   //键值：2</span>\n \n<span class="token comment">// 其中 obj为循环的对象， i 为对象中的“键名”。如果对象是数组，那么i就是坐标。</span>\n</code></pre></div><p><strong>注意：fo…in循环一般用于对象的遍历，但是这里有一个坑需要注意：</strong></p><p>​ <strong>任何对象都继承了Object对象，或者其它对象，继承的类的属性是默认不可遍历的，for... in循环遍历的时候会跳过，但是这个属性是可以更改为可以遍历的，那么就会造成遍历到不属于自身的属性。</strong></p><p><strong>举例来说，对象都继承了toString属性，但是for...in循环不会遍历到这个属性。</strong></p><div class="language-js"><pre><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// toString 属性是存在的obj.toString </span>\n<span class="token comment">// toString() { [native code] }</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> p <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token comment">// 没有任何输出</span>\n</code></pre></div><p><strong>如果继承的属性是可遍历的，那么就会被<code>for...in</code>循环遍历到。但如果只想遍历自身的属性，使用<code>for...in</code>的时候，应该结合使用<code>hasOwnProperty</code>方法，在循环内部判断一下，某个属性是否为对象自身的属性。否则就可以产生遍历失真的情况。</strong></p><div class="language-js"><pre><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;老张&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n    <span class="token keyword">if</span> <span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   \n         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token comment">// name</span>\n</code></pre></div><h2 id="_5、for…of"><strong>5、for…of</strong></h2><p>for…of是ES6新增的方法，但是for…of不能去遍历普通的对象，<strong>for…of的好处是可以使用break跳出循环。</strong></p><ul><li>for-of这个方法避开了for-in循环的所有缺陷</li><li>与forEach()不同的是，它可以正确响应break、continue和return语句</li></ul><p>for-of循环不仅支持数组，还支持大多数类数组对象，例如DOM <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeList" target="_blank" rel="noopener noreferrer">NodeList对象</a>。</p><p>for-of循环也支持字符串遍历</p><div class="language-js"><pre><code><span class="token comment">// for of 循环 直接得到的就是值  !!!</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_6、every-some"><strong>6、every/some</strong></h2><p><strong>返回一个布尔值</strong>。当我们需要判定数组中的元素是否满足某些条件时，可以使用every/some。这两个的区别是，every会去判断判断数组中的每一项，而some则是当某一项满足条件时返回。例如：</p><div class="language-javascript"><pre><code><span class="token keyword">let</span> foo<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">索引：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，数值：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> item<span class="token operator">&gt;</span><span class="token number">2</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>\n</code></pre></div><p>打印结果为：</p><p><img src="https://qn.huat.xyz/mac/20220822124534.png" alt="img"></p><p>当第二项不满足条件式跳出循环，返回false。</p><div class="language-javascript"><pre><code><span class="token keyword">let</span> foo<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">索引：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，数值：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> item<span class="token operator">&gt;</span><span class="token number">2</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>\n</code></pre></div><p>打印结果为：</p><p><img src="https://qn.huat.xyz/mac/20220822124538.png" alt="img"></p><p>当数组的某项满足条件时跳出循环，返回true.</p><p>在按照约定条件<strong>筛选数组</strong>时，every/some是非常方便的方法。</p><p><strong>every/some方法详解</strong></p><p>这两个方法类似“断言”（assert），返回一个布尔值，表示判断数组成员是否符合某种条件。</p><p>​ 它们接受一个函数作为参数，所有数组成员依次执行该函数。该函数接受三个参数：当前成员、当前位置和整个数组，然后返回一个布尔值。</p><p>​ <strong>some方法是只要一个成员的返回值是true，则整个some方法的返回值就是true，否则返回false。(一真必真 相当于||)</strong></p><div class="language-js"><pre><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\narr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">elem<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> elem <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// true   </span>\n</code></pre></div><p>​ <strong>而every方法则相反，所有成员的返回值都是true，整个every方法才返回true，否则返回false。两相比较，some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false. (一假必假 相当于&amp;&amp;)</strong></p><h2 id="_7、filter"><strong>7、filter</strong></h2><p><strong>筛选出一个满足相关条件的新数组。</strong></p><p><strong>filter方法用于过滤数组成员，满足条件的成员组成一个新数组返回。它的参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成一个新数组返回。该方法不会改变原数组。</strong></p><div class="language-javascript"><pre><code><span class="token keyword">let</span> foo<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">索引：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，数值：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> item<span class="token operator">&gt;</span><span class="token number">2</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>\n</code></pre></div><p><img src="https://qn.huat.xyz/mac/20220822124641.png" alt="img"></p><p>将满足返回值条件的item组成一个新的数组。过滤器，顾名思义，比较好理解。在按照约定条件<strong>筛选数组元素</strong>时，filter比较方便。filter() 不会改变原始数组。</p><div class="language-js"><pre><code><span class="token keyword">var</span> ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> newAges <span class="token operator">=</span> ages<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// console.log(v, i)</span>\n    <span class="token keyword">return</span> v <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newAges<span class="token punctuation">)</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">elem</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">return</span> <span class="token punctuation">(</span>elem <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// [4, 5]</span>\n \n<span class="token comment">// 上面代码将大于3的数组成员，作为一个新数组返回。</span>\n \n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \narr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> <span class="token comment">// [1, &quot;a&quot;]</span>\n</code></pre></div><p><strong>filter方法的参数函数也可以接受三个参数：当前成员，当前位置和整个数 组。</strong></p><div class="language-js"><pre><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">elem<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">return</span> index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 3, 5]</span>\n</code></pre></div><p><strong>此外，filter方法也可以接受第二个参数，用来绑定参数函数内部的this变量。</strong></p><div class="language-js"><pre><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token constant">MAX</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> <span class="token function-variable function">myFilter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">MAX</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \narr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>myFilter<span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token comment">// [8, 4, 9]</span>\n</code></pre></div><p>上面代码中，过滤器myFilter内部有this变量，它可以被filter方法的第二个参数obj绑定，返回大于3的成员。</p><h2 id="_8、map"><strong>8、map</strong></h2><p>map即是 “映射”的意思 ，原数组被“映射”成对应新数组</p><p>map：支持return，相当与原数组克隆了一份，把克隆的每项改变了，也不影响原数组</p><div class="language-javascript"><pre><code><span class="token keyword">let</span> foo<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">索引：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，数值：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n                <span class="token keyword">return</span> item<span class="token operator">+</span><span class="token number">2</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>\n</code></pre></div><p><img src="https://qn.huat.xyz/mac/20220822124710.png" alt="img"></p><p><strong>返回一个将每个元素进行“二次加工”的新数组</strong>，map与filter都是返回一个新的数组，区别则是filter是将原数组，通过相关条件筛选出合法的item，来组成一个新的数组，而map则是将每个item通过再加工来返回一个新的数组。</p><p><strong>map方法将数组的所有成员依次传入参数函数，然后把每一次的执行结果组成一个新数组返回。</strong></p><p>注意：是返回一个新数组，而不会改变原数组。</p><div class="language-js"><pre><code><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n \n<span class="token keyword">var</span> newArr<span class="token operator">=</span>numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n     <span class="token comment">// console.log(v, i)</span>\n     <span class="token keyword">return</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// newArr   [2, 3, 4] </span>\n \nnumbers <span class="token comment">// [1, 2, 3]</span>\n</code></pre></div><p><strong>map方法接受一个函数作为参数。该函数调用时，map方法向它传入三个参数：当前成员、当前位置和数组本身。</strong></p><div class="language-js"><pre><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">elem<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">return</span> elem <span class="token operator">*</span> index<span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// [0, 2, 6]</span>\n</code></pre></div><p><strong>此外，map()循环还可以接受第二个参数，用来绑定回调函数内部的this变量，将回调函数内部的this对象，指向第二个参数，间接操作这个参数（一般是数组）。</strong></p><div class="language-js"><pre><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n \n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>\n <span class="token comment">// [&#39;b&#39;, &#39;c&#39;]</span>\n</code></pre></div><h2 id="_9、reduce"><strong>9、reduce</strong></h2><p><strong>将数组元素做“叠加”处理，返回一个值。</strong></p><div class="language-javascript"><pre><code><span class="token keyword">let</span> foo<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>cur</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">索引：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pre<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，数值：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cur<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> pre<span class="token operator">+</span>cur\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>\n</code></pre></div><p>打印结果为：</p><p><img src="https://qn.huat.xyz/mac/20220822124733.png" alt="img"></p><p>pre为累加值，cur为当前值。reduce函数值得注意的是，reduce(fn,init)第二个参数，可以传一个初始值，如果代码改成这样：</p><div class="language-javascript"><pre><code><span class="token keyword">let</span> foo<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>cur</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">索引：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pre<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，数值：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cur<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> pre<span class="token operator">+</span>cur\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>\n</code></pre></div><p>则为：</p><p><img src="https://qn.huat.xyz/mac/20220822124810.png" alt="img"></p><p><code>**reduce**</code><strong>方法和</strong><code>**reduceRight**</code><strong>方法依次处理数组的每个成员，最终累计为一个值。它们的差别是，</strong><code>**reduce**</code><strong>是从左到右处理（从第一个成员到最后一个成员），</strong><code>**reduceRight**</code><strong>则是从右到左（从最后一个成员到第一个成员），其他完全一样。</strong></p><div class="language-js"><pre><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 1 2</span>\n<span class="token comment">// 3 3</span>\n<span class="token comment">// 6 4</span>\n<span class="token comment">// 10 5</span>\n<span class="token comment">//最后结果：15</span>\n</code></pre></div><p><code>**reduce**</code><strong>方法和</strong><code>**reduceRight**</code><strong>方法的第一个参数都是一个函数。该函数接受以下四个参数。</strong></p><ol><li><p><strong>累积变量，默认为数组的第一个成员</strong></p></li><li><p><strong>当前变量，默认为数组的第二个成员</strong></p></li><li><p><strong>当前位置（从0开始）</strong></p></li><li><p><strong>原数组</strong></p><p><strong>这四个参数之中，只有前两个是必须的，后两个则是可选的</strong>。</p></li></ol><p>如果要对累积变量指定初值，可以把它放在<code>reduce</code>方法和<code>reduceRight</code>方法的第二个参数。</p><div class="language-js"><pre><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 25</span>\n</code></pre></div><h2 id="_10-object-keys遍历对象的属性"><strong>10.Object,keys</strong>遍历对象的属性</h2><p><code>**Object.keys**</code><strong>方法的参数是一个对象，返回一个数组。该数组的成员都是该对象自身的（而不是继承的）所有属性名，且只返回可枚举的属性。</strong></p><div class="language-js"><pre><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  p1<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>\n  p2<span class="token operator">:</span> <span class="token number">456</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n \nObject<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// [&quot;p1&quot;, &quot;p2&quot;]</span>\n</code></pre></div><h2 id="_11、object-getownpropertynames-遍历对象的属性">11、<strong>Object.getOwnPropertyNames() 遍历对象的属性</strong></h2><p><code>**Object.getOwnPropertyNames**</code><strong>方法与</strong><code>**Object.keys**</code><strong>类似，也是接受一个对象作为参数，返回一个数组，包含了该对象自身的所有属性名。但它能返回不可枚举的属性。</strong></p><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;World&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n \nObject<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// [&quot;0&quot;, &quot;1&quot;]</span>\nObject<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// [&quot;0&quot;, &quot;1&quot;, &quot;length&quot;]</span>\n</code></pre></div><p><strong>上面代码中，数组的<code>length</code>属性是不可枚举的属性，所以只出现在<code>Object.getOwnPropertyNames</code>方法的返回结果中。</strong></p><p><strong>由于 JavaScript 没有提供计算对象属性个数的方法，所以可以用这两个方法代替。</strong></p><div class="language-js"><pre><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  p1<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>\n  p2<span class="token operator">:</span> <span class="token number">456</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n \nObject<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token comment">// 2</span>\nObject<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token comment">// 2</span>\n</code></pre></div><p><strong>使用Object.getOwnPropertyNames(obj)遍历</strong></p><p><strong>返回一个数组,包含对象自身的所有属性(不含Symbol属性,但是包括不可枚举属性).</strong></p><div class="language-js"><pre><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;0&#39;</span><span class="token operator">:</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;1&#39;</span><span class="token operator">:</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2&#39;</span><span class="token operator">:</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nObject<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><img src="https://qn.huat.xyz/mac/20220822124844.png" alt="img"></p><h2 id="_11、indexof"><strong>11、indexOf</strong></h2><p><strong>返回指定字符串首次出现的位置</strong></p><div class="language-javascript"><pre><code> <span class="token keyword">let</span> foo<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;57&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;17&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;37&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;7&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;4&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;7&#39;</span><span class="token punctuation">)</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>\n</code></pre></div><p><img src="https://qn.huat.xyz/mac/20220822124852.png" alt="img"></p><p>这个函数比较常用的应用场景是，在做if判断时，可以代替||，&amp;&amp;等关系符。比如：</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-4630018/iwhexlrfd9.png?imageView2/2/w/1620" alt="img"></p><p>可以代替 if（value==’next’||value==’pre’）的这种写法，当判断元素较多时，这种写法比较划算。</p><h2 id="_12、循环特征（相同与不同）">12、循环特征（相同与不同）</h2><div class="language-js"><pre><code>以上循环特征（相同与不同）：\n\n<span class="token function">一：map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，foreach，filter循环的共同之处：\n\n      <span class="token number">1.</span>foreach，map，filter循环中途是无法停止的，总是会将所有成员遍历完。\n\n      <span class="token number">2.</span>他们都可以接受第二个参数，用来绑定回调函数内部的<span class="token keyword">this</span>变量，将回调函数内部的<span class="token keyword">this</span>对象，指向第二个参数，间接操作这个参数（一般是数组）。\n\n<span class="token function">二：map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>循环和forEach循环的不同：\n\n           forEach循环没有返回值；map，filter循环有返回值。\n\n<span class="token function">三：map</span><span class="token punctuation">(</span><span class="token function">环和filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>循环都会跳过空位，<span class="token keyword">for</span>和<span class="token keyword">while</span>不会\n\n\n<span class="token function">四：some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">和every</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>\n\n       <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span>只要有一个是<span class="token boolean">true</span>，便返回<span class="token boolean">true</span><span class="token function">；而every</span><span class="token punctuation">(</span><span class="token punctuation">)</span>只要有一个是<span class="token boolean">false</span>，便返回<span class="token boolean">false</span><span class="token punctuation">.</span>\n\n<span class="token function">五：reduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">，reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：\n\n       reduce是从左到右处理（从第一个成员到最后一个成员），reduceRight则是从右到左（从最后一个成员到第一个成员）。\n\n六：Object对象的两个遍历Object<span class="token punctuation">.</span>keys与Object<span class="token punctuation">.</span>getOwnPropertyNames：\n\n   他们都是遍历对象的属性，也是接受一个对象作为参数，返回一个数组，包含了该对象自身的所有属性名。但Object<span class="token punctuation">.</span>keys不能返回不可枚举的属性；Object<span class="token punctuation">.</span>getOwnPropertyNames能返回不可枚举的属性。\n</code></pre></div><h2 id="_13、总结"><strong>13、总结</strong></h2><p><strong>个人非常喜欢filter/map/reduce，但是看到身边的同学一言不合就foreach,替这三个函数心疼几秒。。。不过低版本浏览器也确实不支持这些函数。。。根据自己需要去选择合适的遍历方式可以大大提升效率。哦耶</strong></p>',115)];t.render=function(a,p,t,e,c,u){return n(),s("div",null,o)};export default t;export{p as __pageData};
