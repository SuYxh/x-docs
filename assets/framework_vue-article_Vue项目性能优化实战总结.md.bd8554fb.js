import{o as n,c as s,e as a}from"./app.c30441d1.js";const p='{"title":"分析项目bundle大小","description":"","frontmatter":{},"headers":[{"level":2,"title":"分析项目bundle大小","slug":"分析项目bundle大小"},{"level":3,"title":"report","slug":"report"},{"level":3,"title":"build","slug":"build"},{"level":2,"title":"1\\\\. 懒加载模块","slug":"_1-懒加载模块"},{"level":2,"title":"2\\\\. 路由懒加载拆分","slug":"_2-路由懒加载拆分"},{"level":2,"title":"3\\\\. prefetch预渲染组件","slug":"_3-prefetch预渲染组件"},{"level":2,"title":"4\\\\. 优化三方库依赖","slug":"_4-优化三方库依赖"},{"level":2,"title":"5\\\\. 善用浏览器缓存","slug":"_5-善用浏览器缓存"},{"level":2,"title":"6\\\\. 优化压缩图片","slug":"_6-优化压缩图片"},{"level":2,"title":"7\\\\. 静态文件上CDN","slug":"_7-静态文件上cdn"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"framework/vue-article/Vue项目性能优化实战总结.md","lastUpdated":1661330957047}',t={},o=[a('<p>你知道你的项目的首次加载时间需要多久吗？你有给自己的项目做过性能优化吗？</p><p>据统计53%的用户不会等待超过3秒就会关闭掉网页，所以对于项目的性能优化尤为的重要。</p><p>闲话少说，今天我们来详细了解如何优化Vue项目的性能。</p><h2 id="分析项目bundle大小">分析项目bundle大小</h2><p>打包后的文件大小直接影响我们访问的加载速度，所以我们要知道哪些打包文件存在性能问题。</p><p>查看bundle大小主要有两种方法</p><h3 id="report">report</h3><p>使用<code>webpack-bundle-analyzer</code>来生成一个报告，可以清晰直观的看出每个打包后文件的大小</p><p>我们在Vue项目的package.json文件中加入下面的命令</p><div class="language-json"><pre><code><span class="token property">&quot;build-report&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service build --report&quot;</span>\n</code></pre></div><p>然后，在命令行中运行</p><div class="language-bash"><pre><code><span class="token function">npm</span> run build-report\n</code></pre></div><p>等待一段时间后，会在dist文件中生成一个report.html文件，我们在浏览器中打开它</p><p><img src="https://pic4.zhimg.com/v2-e3ccf46ccf4ddcd3e00ff26dc69dc01b_r.jpg" alt=""></p><h3 id="build">build</h3><p>在本地使用build打包命令</p><div class="language-text"><pre><code>npm run build\n</code></pre></div><p>然后看终端的输出信息</p><p><img src="https://pic4.zhimg.com/v2-ba075b82d1a3577fb0bd5ee9a30b5027_r.jpg" alt=""></p><p>可以看到主要的文件从大到小的排序</p><p>在查看完关键的信息后，我们可以做一些优化手段</p><h2 id="_1-懒加载模块">1. 懒加载模块</h2><p>比如Echarts图标的包和编辑器的包，都是很大的有45百kb，但并不是所有的页面都需要图表和编辑器，只有少量页面需要，所以我们可以把Echarts和编辑器放到需要的页面中去加载，不要放到全局里面，这样其他页面就省去加载他们的时间。</p><p>要查看浏览器加载文件的顺序，我们打开浏览器的开发者工具，点击Network，勾选上Disable cache，这样不会从浏览器的缓存中去加载文件，然后重新去刷新页面，可以看到所有文件的加载顺序</p><p><img src="https://pic1.zhimg.com/v2-69b18d29a72047bd8f55b25e2b559708_r.jpg" alt=""></p><p>一般我引入模块是这样写</p><div class="language-js"><pre><code><span class="token comment">// demo.js</span>\n<span class="token keyword">const</span> Demo <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">testDemo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;这是DEMO&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> Demo\n\n<span class="token comment">// app.js</span>\n<span class="token keyword">import</span> Demo <span class="token keyword">from</span> <span class="token string">&#39;./demo.js&#39;</span>\nDemo<span class="token punctuation">.</span><span class="token function">testDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p>使用懒加载这样写</p><div class="language-js"><pre><code><span class="token comment">// app.js</span>\n<span class="token keyword">const</span> <span class="token function-variable function">getDemo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./demo.js&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 延迟加载</span>\n<span class="token function">getDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">{</span> testDemo <span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token function">testDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p>懒加载能够非常好的解决bundle过大的问题，把一些用户并不常用的功能放到懒加载里，当用户点击或者滚动可视区再进行加载。</p><h2 id="_2-路由懒加载拆分">2. 路由懒加载拆分</h2><p>一般我们的路由可能这样写，这样写在打包时把Dashboard组件和Contact组件的代码全部打包到JS中。</p><div class="language-js"><pre><code><span class="token comment">// routing.js</span>\n<span class="token keyword">import</span> Dashboard <span class="token keyword">from</span> <span class="token string">&#39;./Dashboard.vue&#39;</span>\n<span class="token keyword">import</span> Contact <span class="token keyword">from</span> <span class="token string">&#39;./Contact.vue&#39;</span>\n\n<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> Dashboard <span class="token punctuation">}</span>\n  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/contact&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> Contact <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div><p>我们可以按路由去懒加载，改成下面这样</p><div class="language-js"><pre><code><span class="token comment">// routing.js </span>\n<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./Dashboard.vue&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/contact&#39;</span><span class="token punctuation">,</span> <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./Contact.vue&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div><p>这样的好处就是，我们没有访问路由时<code>/contact</code>，就不会去加载<code>Contact.vue</code>的代码，只有访问到时才会去加载组件的代码。</p><p>通过webpackChunkName来聚合打包多个页面到一个bundle中</p><p>一般我们的一个页面的bundle可能非常的小，我们可以把一个模块的所有路由的页面都打包到一个bundle中，在import函数加入<code>/* webpackChunkName:&#39;group-superAdmin&#39; */</code>，其中webpackChunkName的名称需要自己定义。</p><div class="language-js"><pre><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;superAdminAccountList&#39;</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;SuperAdminAccountList&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName:&#39;group-superAdmin&#39; */</span> <span class="token string">&#39;@/activity/superAdmin/AccountList&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;superAdminCreateAccount&#39;</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;SuperAdminCreateAccount&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName:&#39;group-superAdmin&#39; */</span> <span class="token string">&#39;@/activity/superAdmin/CreateAccount&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;superAdminRoleList&#39;</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;SuperAdminRoleList&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName:&#39;group-superAdmin&#39; */</span> <span class="token string">&#39;@/activity/superAdmin/RoleList&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;superAdminCreateRole/:id?/:look?&#39;</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;SuperAdminCreateRole&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName:&#39;group-superAdmin&#39; */</span> <span class="token string">&#39;@/activity/superAdmin/CreateRole&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="_3-prefetch预渲染组件">3. prefetch预渲染组件</h2><blockquote><p>prefetch是一种利用浏览器的空闲时间加载页面将来可能用到的资源的一种机制；通常可以用于加载非首页的其他页面所需要的资源，以便加快后续页面的首屏速度；</p></blockquote><p>通过webpack我们可以非常方便的实现组件的预渲染，通过加入<code>/* webpackPrefetch: true */</code>，webpack会自动在页面中加入 的标签。</p><div class="language-js"><pre><code>components<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">ModalView</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackPrefetch: true */</span> <span class="token string">&#39;./ModalView.vue&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="_4-优化三方库依赖">4. 优化三方库依赖</h2><p>一般我们在项目中都会用到一些三方的依赖库，比如lodash</p><p><img src="https://pic4.zhimg.com/v2-8bfb7808bd2a205c610f3072357bc427_r.jpg" alt=""></p><p>如果我们全量的引入的话会很大，但我们可能只用到一两个函数，我们只需要引用我们需要的就好</p><div class="language-text"><pre><code>import isEmpty from &#39;lodash/isEmpty`\n</code></pre></div><h2 id="_5-善用浏览器缓存">5. 善用浏览器缓存</h2><p>我们都知道我们访问一个网站后，浏览器会对JS和CSS去进行缓存，在下次访问的时候会从缓存中去获取文件，不用再去请求。你可能会问浏览器缓存我们也控制不了？我们怎么做呢？</p><p>一般我们打包后的文件像这样</p><ul><li>main.[hash].js – 根组件</li><li>common.[hash].js – 公共组件</li><li>dashboard.[hash].js – dashboard页面</li><li>contact.[hash].js – contact页面</li></ul><p>其实我们可以把一些很长时间都不需要的公共代码依赖放到common.[hash].js中，这样一次缓存后，以后再次访问就不会去发请求。</p><h2 id="_6-优化压缩图片">6. 优化压缩图片</h2><p>图片的大小对于项目的性能也至关重要，一般webpack会帮助我们把小的图片直接转为base64来减少网络请求。对其他图片来说我们也要进行压缩，一般压缩方式有两种</p><ol><li>使用软件进行压缩</li><li>使用CDN进行文件压缩</li></ol><p>使用软件压缩我推荐使用TinyPNG，一个在线网站，使用它压缩几乎不损失清晰度而且压缩效果特别好。</p><p>使用CDN压缩，一般专业的文件存储都会提供图片的处理功能比如京东的图片地址，中间的<code>s280x280</code>可以去修改图片宽高，后面的.webp后缀把jpg图片转换成webp格式，进一步的来缩小文件的大小。</p><div class="language-text"><pre><code>https://img30.360buyimg.com/seckillcms/s280x280_jfs/t1/187871/40/5785/69529/60b4af7dE5a50eaff/c235bb87f19c1698.jpg.webp\n</code></pre></div><h2 id="_7-静态文件上cdn">7. 静态文件上CDN</h2><p>一般小公司可能为了方便直接把CSS、JS、图片等文件直接传到服务器上进行访问，使用CDN的优势在于CDN时全国的各个地方都会有服务节点，而且CDN也会缓存文件，所以通过CDN访问静态文件和直接访问服务器文件要快上几倍。</p><p>淘宝的图片访问，有98%的流量都走了CDN缓存。只有2%会回源到源站，节省了大量的服务器资源。</p><h2 id="总结">总结</h2><p>通过上面的一波操作，我们的项目首屏加载和淘宝京东网站几乎差不多了，还有其他更多优化办法，欢迎您再评论区告诉我，我们相互学习。</p><blockquote><p>如果本文有帮助，微信搜索【小帅的编程笔记】，每天一个小知识</p></blockquote>',65)];t.render=function(a,p,t,e,c,l){return n(),s("div",null,o)};export default t;export{p as __pageData};
