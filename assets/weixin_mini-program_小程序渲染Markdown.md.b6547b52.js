import{o as t,c as n,e}from"./app.1a169b30.js";const o='{"title":"Towxml 介绍","description":"","frontmatter":{},"headers":[{"level":2,"title":"构建Twoxml","slug":"构建twoxml"},{"level":2,"title":"1\\\\. 引入库 /app.js","slug":"_1-引入库-app-js"},{"level":2,"title":"2\\\\. 在具体页面的配置文件中引入twoxml组件","slug":"_2-在具体页面的配置文件中引入twoxml组件"},{"level":2,"title":"3\\\\. 在页面中插入组件","slug":"_3-在页面中插入组件"},{"level":2,"title":"4\\\\. 在js中解析内容","slug":"_4-在js中解析内容"},{"level":3,"title":"plus无忧版","slug":"plus无忧版"},{"level":3,"title":"基础版","slug":"基础版"}],"relativePath":"weixin/mini-program/小程序渲染Markdown.md","lastUpdated":1657971578835}',l={},a=[e('<blockquote><p>最近在做需要展示文章详情的功能，详情打算用Markdown展示，发现微信小程序在支持Markdown方面不是很友好，小蛋我无意中发现一个好用的组件，Towxml，完美支持Markdown,下面就带大家手把手实现Markdown功能</p></blockquote><h1 id="towxml-介绍">Towxml 介绍</h1><p>｜Towxml 官网 <a href="https://github.com/sbfkcel/towxml" title="https://github.com/sbfkcel/towxml" target="_blank" rel="noopener noreferrer">github.com/sbfkcel/tow…</a></p><p>Towxml是一个可将HTML、Markdown转为微信小程序WXML的渲染库，支持以下功能：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/151d3652e4ba35603becfdbbd0c4a99f.webp?x-oss-process=image/format,png" alt="image-20211009115933414"></p><p>使用Towxml可以实现如下的Markdown效果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3ad3314f60545857da1ad92f1ac9fe90.webp?x-oss-process=image/format,png" alt="image-20211009120021299"></p><h1 id="在小程序中引入twoxml">在小程序中引入Twoxml</h1><h2 id="构建twoxml">构建Twoxml</h2><ul><li>克隆项目到本地</li></ul><div class="language-auto"><pre><code>git clone https://github.com/sbfkcel/towxml.git\n复制代码\n12\n</code></pre></div><ul><li><p>如果没有安装过npm依赖，先安装依赖</p><div class="language-auto"><pre><code>npm install 或 yarn\n复制代码\n12\n</code></pre></div></li><li><p>编辑配置文件towxml/config.js</p><p>根据自己的实际需求保留你需要的功能即可</p></li><li><p>运行 <strong>npm run build</strong> 或 <strong>yarn run build</strong> 即可</p><blockquote><p>构建好后出来的文件在dist目录下，将dist目录复制到小程序项目根目录中并将目录名称改为towxml即可使用</p></blockquote></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/e4c556e0abccb067018887d463206bdc.webp?x-oss-process=image/format,png" alt="image-20211009121010136"></p><h1 id="在小程序中使用twoxml">在小程序中使用Twoxml</h1><p>上一步我们已经把towxml文件夹引入到小程序中：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/da84fef7f9ceed71fa0a5ce89d264f34.webp?x-oss-process=image/format,png" alt="image-20211009121918059"></p><h2 id="_1-引入库-app-js">1. 引入库 /app.js</h2><div class="language-auto"><pre><code>// app.js\nApp({\n  // 引入`towxml3.0`解析方法\n  towxml:require(&#39;/towxml/index&#39;),\n})\n复制代码\n123456\n</code></pre></div><h2 id="_2-在具体页面的配置文件中引入twoxml组件">2. 在具体页面的配置文件中引入twoxml组件</h2><div class="language-auto"><pre><code>// pages/content-detail/content-detail.json\n{\n  &quot;usingComponents&quot;: {\n    &quot;towxml&quot;:&quot;/towxml/towxml&quot;\n  }\n}\n复制代码\n1234567\n</code></pre></div><h2 id="_3-在页面中插入组件">3. 在页面中插入组件</h2><div class="language-auto"><pre><code>// pages/content-detail/content-detail.wxml\n&lt;view class=&quot;content-info&quot;&gt;\n  &lt;towxml nodes=&quot;{{article}}&quot;/&gt;\n&lt;/view&gt;\n复制代码\n12345\n</code></pre></div><h2 id="_4-在js中解析内容">4. 在js中解析内容</h2><p>解析内容的方式我这边给出了两种版本，一种是plus无忧版，一种是基础版，我先说说plus版</p><h3 id="plus无忧版">plus无忧版</h3><p>正常来说，markdown源数据都应该是从服务端获取，那我们就先封装一个请求方法(我是在App.js中进行封装)</p><div class="language-auto"><pre><code>App({\n  // 引入`towxml3.0`解析方法\n  towxml:require(&#39;/towxml/index&#39;),\n    //声明一个数据请求方法\n  getText: (url, callback) =&gt; {\n    wx.request({\n      url: url,\n      header: {\n        &#39;content-type&#39;: &#39;application/x-www-form-urlencoded&#39;\n      },\n      success: (res) =&gt; {\n        if (typeof callback === &#39;function&#39;) {\n          callback(res);\n        };\n      }\n    });\n  }\n  })\n复制代码\n12345678910111213141516171819\n</code></pre></div><p>然后在具体页面的js文件中处理解析内容</p><div class="language-auto"><pre><code>// pages/content-detail/content-detail.js\nconst app = getApp();\nPage({\n​\n  /**\n   * 页面的初始数据\n   */\n  data: {\n   article:{}\n  },\n​\n  /**\n   * 生命周期函数--监听页面加载\n   */\n  onLoad: function (options) {\n    app.getText(&#39;https://www.vvadd.com/wxml_demo/demo.txt?v=2&#39;,res =&gt; {\n      let obj = app.towxml(res.data,&#39;markdown&#39;,{\n        theme:&#39;light&#39;, //主题 dark 黑色，light白色，不填默认是light\n        base:&quot;www.xxx.com&quot;,\n        events:{      //为元素绑定的事件方法\n          tap:e =&gt; {\n            console.log(&#39;tap&#39;,e);\n          },\n          change:e =&gt; {\n            console.log(&#39;todo&#39;,e);\n          }\n        }\n      });\n      //更新解析数据\n      this.setData({\n        article:obj,\n      });\n    });\n  },\n})\n复制代码\n123456789101112131415161718192021222324252627282930313233343536\n</code></pre></div><p>这里我是请求一个网址<a href="https://www.vvadd.com/wxml_demo/demo.txt?v=2" title="https://www.vvadd.com/wxml_demo/demo.txt?v=2" target="_blank" rel="noopener noreferrer">www.vvadd.com/wxml_demo/d…</a>，这个网址会给我返回markdown源数据，我们先来看下这个请求地址里面有啥</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0eb9cd0b8891197279b54dfa24650ce2.webp?x-oss-process=image/format,png" alt="image-20211009124700542"></p><p>我们获取到markdown数据后将其进行赋值，然后在页面就能直接展示出来，激动人心的时候到来了，看下最终的效果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8e304a2ef3e95235a901946a6669e074.webp?x-oss-process=image/format,png" alt="image-20211009125002811"></p><p>效果是不是很完美，完美实现markdown展示</p><h3 id="基础版">基础版</h3><p>说完plus版本再来说说基础版，因为大家可能会有对markdown数据源的自定义处理的操作，所以就再来看看基础版的实现</p><div class="language-auto"><pre><code>// pages/content-detail/content-detail.js\nconst app = getApp();\nPage({\n​\n  /**\n   * 页面的初始数据\n   */\n  data: {\n   article:{}\n  },\n​\n  /**\n   * 生命周期函数--监听页面加载\n   */\n  onLoad: function (options) {\n    //markdown数据源\n      let content= &quot;&lt;h1&gt;h1h1h1h1h1h1&lt;/h1&gt;&lt;h2&gt;h2h2h2h2&lt;/h2&gt;&lt;h3&gt;123456&lt;/h3&gt;&quot;\n    let result = app.towxml(content,&#39;markdown&#39;,{\n       base:&#39;www.xxx.com&#39;,             // 相对资源的base路径\n       theme:&#39;light&#39;,                   // 主题，默认`light`\n      events:{                    // 为元素绑定的事件方法\n           tap:(e)=&gt;{\n               console.log(&#39;h4&#39;,e);\n           }\n       }\n   });\n   // 更新解析数据\n   this.setData({\n      article:result\n   });\n  },\n})\n复制代码\n123456789101112131415161718192021222324252627282930313233\n</code></pre></div><p>基础版就写完了，也很简单，其实和plus版的区别也不大，plus版就是把数据请求进行了一层封装，让我们来看下效果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/658883b4eb423d7c325e065e730249ea.webp?x-oss-process=image/format,png" alt="image-20211009130048088"></p><h1 id="总结">总结</h1><p>使用Towxml来实现markdown其实比较简单，不仅支持了丰富的markdown语法，还支持图表，流程图，数学公式，在真正的开发中，markdown数据源是从服务端进行获取，建议最好是由服务端将markdown数据源进行解析出来，前端获取后直接进行赋值就行，避免造成性能问题</p><blockquote><p>学无止境，我虽然是服务端开发，但对小程序开发的热爱促使我不断的对其学习，如果大家觉得我写的不错，烦请给我点个赞，关注一波，一起交流学习，一个人可以走的很快，一群人会走的更远</p></blockquote>',42)];l.render=function(e,o,l,p,s,i){return t(),n("div",null,a)};export default l;export{o as __pageData};
