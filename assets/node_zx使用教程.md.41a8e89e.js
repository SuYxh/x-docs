import{o as n,c as s,e as a}from"./app.7e0da940.js";const t='{"title":"zx 使用教程","description":"","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介"},{"level":2,"title":"安装及使用方法","slug":"安装及使用方法"},{"level":2,"title":"zx 常用命令","slug":"zx-常用命令"}],"relativePath":"node/zx使用教程.md","lastUpdated":1657972228289}',p={},o=[a('<h1 id="zx-使用教程">zx 使用教程</h1><p><img src="https://qn.huat.xyz/mac/20220421220104.webp" alt="google/zx: A tool for writing better scripts"></p><blockquote><p>zx 是 Google 公司推出的一个更方便、更友好帮助开发者写脚本的工具 。有 Google 背书，在短短几天内，该工具在 GitHub 的 Star 数就破万了。</p></blockquote><h2 id="简介">简介</h2><p>Bash 很好，但是在编写脚本的时候，人们通常会选择一种更方便的编程语言，JavaScript 就是一个很完美的选择。但是标准的 Node.js 库在使用之前需要许多额外的操作，比如安装、引入库等，zx 提供一个包装器 <code>child_process</code>，用于转义参数并提供合并的默认值。</p><div class="language-js"><pre><code><span class="token hashbang comment">#!/usr/bin/env zx</span>\n\n<span class="token keyword">await</span> $<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">cat package.json | grep name</span><span class="token template-punctuation string">`</span></span>\n\n<span class="token keyword">let</span> branch <span class="token operator">=</span> <span class="token keyword">await</span> $<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">git branch --show-current</span><span class="token template-punctuation string">`</span></span>\n<span class="token keyword">await</span> $<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">dep deploy --branch=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>branch<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n\n<span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  $<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sleep 1; echo 1</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  $<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sleep 2; echo 2</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  $<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sleep 3; echo 3</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;foo bar&#39;</span>\n<span class="token keyword">await</span> $<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">mkdir /tmp/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><h2 id="安装及使用方法">安装及使用方法</h2><p>要安装 zx 工具，请执行下面这行命令（全局安装）：</p><div class="language-shell"><pre><code>$ <span class="token function">npm</span> i -g zx\n</code></pre></div><p>安装好 zx 之后，将编写的脚本放在 <code>.mjs</code> 后缀的文件中，或者使用 <code>.js</code> 后缀，但是需要使用 <code>void async function () {...}()</code> 对脚本进行包装。</p><p>使用时需注意以下几点：</p><p><strong>1、脚本需要包含以下文件头：</strong></p><div class="language-shell"><pre><code><span class="token shebang important">#!/usr/bin/env zx</span>\n</code></pre></div><p><strong>2、为脚本添加执行权限再运行</strong></p><div class="language-shell"><pre><code>$ <span class="token function">chmod</span> +x ./script.mjs\n$ ./script.mjs\n\n<span class="token comment"># 或者使用这个命令</span>\n$ zx ./script.mjs\n</code></pre></div><h2 id="zx-常用命令">zx 常用命令</h2><p>使用 <code>child_process</code> 包中提供的 <code>exec</code> 函数，可以把字符串当做命令执行，并返回一个 <code>Promise&lt;ProcessOutput&gt;</code> 对象。</p><div class="language-JavaScript"><pre><code><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">await</span> $<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ls -1 | wc -l</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Files count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre></div><p>要并行上传文件，可以使用下面的脚本：</p><div class="language-JavaScript"><pre><code><span class="token keyword">let</span> hosts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>\n<span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>hosts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">host</span> <span class="token operator">=&gt;</span>\n  $<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rsync -azP ./src </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>host<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:/var/www</span><span class="token template-punctuation string">`</span></span>  \n<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p>如果执行脚本返回非 0 状态码，将会抛出 <code>ProcessOutput</code> 对象：</p><div class="language-JavaScript"><pre><code><span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token keyword">await</span> $<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">exit 1</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Exit code: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>p<span class="token punctuation">.</span>exitCode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>p<span class="token punctuation">.</span>stderr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>抛出的 <code>ProcessOutput</code> 对象结构如下：</p><div class="language-TypeScript"><pre><code><span class="token keyword">class</span> <span class="token class-name">ProcessOutput</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> exitCode<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token keyword">readonly</span> stdout<span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token keyword">readonly</span> stderr<span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>要修改工作路径，可以使用 <code>cd()</code> 方法：</p><div class="language-JavaScript"><pre><code><span class="token function">cd</span><span class="token punctuation">(</span><span class="token string">&#39;/tmp&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 将输出 /tmp</span>\n<span class="token keyword">await</span> $<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pwd</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p><code>fetch()</code> 方法是对 <code>node-fetch</code> 包的包装：</p><div class="language-JavaScript"><pre><code><span class="token keyword">let</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;http://wttr.in&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>resp<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> resp<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>question()</code> 方法是对 <code>readline</code> 包的包装：</p><div class="language-TypeScript"><pre><code><span class="token keyword">type</span> <span class="token class-name">QuestionOptions</span> <span class="token operator">=</span> <span class="token punctuation">{</span> choices<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">question</span><span class="token punctuation">(</span>query<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> QuestionOptions<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n</code></pre></div><p>用法：</p><div class="language-JavaScript"><pre><code><span class="token keyword">let</span> username <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">question</span><span class="token punctuation">(</span><span class="token string">&#39;What is your username? &#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> token <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">question</span><span class="token punctuation">(</span><span class="token string">&#39;Choose env variable: &#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  choices<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>对于 <code>chalk</code> 包，不需要导入就可以直接用：</p><div class="language-JavaScript"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">blue</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p><code>fs</code> 包，导入就可以直接用：</p><div class="language-JavaScript"><pre><code><span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./package.json&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p><code>Promisified</code> 默认被引入了，等同于以下代码：</p><div class="language-JavaScript"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>promises <span class="token keyword">as</span> fs<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>\n</code></pre></div><p><code>os</code> 包，导入就可以直接用：</p><div class="language-JavaScript"><pre><code><span class="token keyword">await</span> $<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">cd </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>os<span class="token punctuation">.</span><span class="token function">homedir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &amp;&amp; mkdir example</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p>zx 还可以从其他脚本导入：</p><div class="language-JavaScript"><pre><code><span class="token hashbang comment">#!/usr/bin/env node</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>$<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zx&#39;</span>\n<span class="token keyword">await</span> $<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">date</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p>传递环境变量：</p><div class="language-JavaScript"><pre><code>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">FOO</span> <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span>\n<span class="token keyword">await</span> $<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">echo $FOO</span><span class="token template-punctuation string">`</span></span>\n</code></pre></div><p>执行远程脚本：</p><div class="language-JavaScript"><pre><code>zx https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>your<span class="token operator">-</span>remote<span class="token operator">-</span>server<span class="token punctuation">.</span>com<span class="token operator">/</span>example<span class="token operator">-</span>script<span class="token punctuation">.</span>mjs\n</code></pre></div><p>全文完，更多用法，请参考 zx 官方文档。</p><p>zx 项目地址：<a href="https://github.com/google/zx" target="_blank" rel="noopener noreferrer">https://github.com/google/zx</a></p><p>参考</p><p><a href="https://juejin.cn/post/6979989936137043999" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6979989936137043999</a></p>',50)];p.render=function(a,t,p,e,c,l){return n(),s("div",null,o)};export default p;export{t as __pageData};
