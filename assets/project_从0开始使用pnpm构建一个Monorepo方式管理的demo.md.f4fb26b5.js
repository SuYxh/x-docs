import{o as n,c as o,e as s}from"./app.69a22d0a.js";const a='{"title":"🍍 写在前面","description":"","frontmatter":{},"headers":[{"level":2,"title":"🍍 写在前面","slug":"🍍-写在前面"},{"level":2,"title":"🍊 什么是Monorepo？什么是pnpm？","slug":"🍊-什么是monorepo？什么是pnpm？"},{"level":2,"title":"🍌 搞一个Monorepo的demo玩玩","slug":"🍌-搞一个monorepo的demo玩玩"},{"level":3,"title":"🍋 安装依赖","slug":"🍋-安装依赖"},{"level":3,"title":"🍋 移除依赖","slug":"🍋-移除依赖"},{"level":3,"title":"🍌 packageA中引用packageB","slug":"🍌-packagea中引用packageb"},{"level":2,"title":"🍍 写在最后","slug":"🍍-写在最后"}],"relativePath":"project/从0开始使用pnpm构建一个Monorepo方式管理的demo.md","lastUpdated":1661575019153}',p={},e=[s('<h2 id="🍍-写在前面">🍍 写在前面</h2><p>Monorepo这个词你应该不止一次听说了，像Vue3、Vite、ElementPlus等优秀开源项目都是使用Monorepo的方式管理项目，且这里说到的这几个项目都是采用pnpm作为包管理工具。</p><p>这篇文章就使用pnpm构建一个简单的Monorepo方式管理的项目。</p><h2 id="🍊-什么是monorepo？什么是pnpm？">🍊 什么是Monorepo？什么是pnpm？</h2><p>Q：什么是Monorepo？</p><p>A：Monorepo是一种项目管理方式，就是把多个项目放在一个仓库里面，可以参考神三元大佬的一篇文章：<a href="https://juejin.cn/post/6944877410827370504" title="https://juejin.cn/post/6944877410827370504" target="_blank" rel="noopener noreferrer">现代前端工程为什么越来越离不开 Monorepo?</a>，这篇文章中介绍了Monorepo的概念、收益以及MulitRepo的弊端。</p><p>Q：什么是pnpm？</p><p>A：pnpm就是一个包管理工具，原生支持Monorepo，比npm和yarn更快一些，其他的可以参考<a href="https://link.juejin.cn/?target=https%3A%2F%2Fpnpm.io%2Fzh%2F" title="https://pnpm.io/zh/" target="_blank" rel="noopener noreferrer">官网</a>和神三元大佬的另一篇文章：<a href="https://juejin.cn/post/6932046455733485575" title="https://juejin.cn/post/6932046455733485575" target="_blank" rel="noopener noreferrer">为什么现在我更推荐 pnpm 而不是 npm/yarn?</a></p><h2 id="🍌-搞一个monorepo的demo玩玩">🍌 搞一个Monorepo的demo玩玩</h2><p>现在我们就开始使用pnpm来构建一个Monorepo，在正事开始之前，你先需要保证你的电脑中具有Node.js，我的版本的是<code>16.9.0</code>。</p><p>首先你需要有pnpm这个工具，安装的话可以从官网找方法，或者直接使用npm安装，命令如下：</p><div class="language-"><pre><code>npm i pnpm -g\n</code></pre></div><p>现在我们开始搞事情。</p><p>第一步，创建一个项目的根目录，这里就叫<code>monorepo-demo</code>，咋创建都可，这里使用的是命令：</p><div class="language-"><pre><code>mkdir monorepo-demo\n</code></pre></div><p>第二步，初始化<code>package.json</code>，这个没啥说的，命令如下：</p><div class="language-"><pre><code>pnpm init\n</code></pre></div><p>这里我对内容做了一点修改，<code>package.json</code>的内容如下：</p><div class="language-"><pre><code>{\n  &quot;name&quot;: &quot;monorepo-demo&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  },\n  &quot;type&quot;: &quot;module&quot;,\n  &quot;keywords&quot;: [],\n  &quot;author&quot;: &quot;ywanzhou&quot;,\n  &quot;license&quot;: &quot;MIT&quot;\n}\n</code></pre></div><p>这里我主要添加了一个<code>type</code>字段，这里我使用ESModule模块化规范。</p><p>第三步，创建<code>pnpm-workspace.yaml</code>文件，这个文件定义了工作空间的根目录，内容如下：</p><div class="language-"><pre><code>packages:\n  - &#39;packages/*&#39;\n</code></pre></div><p>现在我们就可以在<code>packages</code>中创建多个项目了，目录结构如下：</p><div class="language-"><pre><code>monorepo-demo\n├── package.json\n├── packages\n│   ├── components\n│   │   ├── index.js\n│   │   └── package.json\n│   ├── core\n│   │   ├── index.js\n│   │   └── package.json\n│   ├── utils\n│   │   ├── index.js\n│   │   └── package.json\n├── pnpm-lock.yaml\n└── pnpm-workspace.yaml\n</code></pre></div><p>第四步，编写每个项目的<code>package.json</code>，其实主要是编写一下名称，方便以后使用，这里我的如下：</p><div class="language-"><pre><code>{\n  &quot;name&quot;: &quot;@packages/components&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  },\n  &quot;keywords&quot;: [],\n  &quot;author&quot;: &quot;&quot;,\n  &quot;type&quot;: &quot;module&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;dependencies&quot;: {}\n}\n</code></pre></div><p>剩余的两个名称分别为<code>@packages/core</code>和<code>@packages/utils</code>。</p><p>其实到这基本工作就准备好了，现在介绍一下如何安装依赖，如何在packageA中引用packageB。</p><h3 id="🍋-安装依赖">🍋 安装依赖</h3><p>就这个demo来说，我们如果在根目录下安装依赖的话，这个依赖可以在所有的packages中使用，如果我们需要为具体的一个package安装依赖怎么办？</p><p>cd到package的所在目录嘛？漏，大漏特漏，我们可以通过下面这个命令：</p><div class="language-"><pre><code>pnpm --filter &lt;package_selector&gt; &lt;command&gt;\n</code></pre></div><p>例如我们需要在<code>@packages/components</code>安装<a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Flodash" title="https://www.npmjs.com/package/lodash" target="_blank" rel="noopener noreferrer">lodash</a>，命令如下：</p><div class="language-"><pre><code>pnpm -F @packages/components add lodash\n</code></pre></div><blockquote><p><code>-F</code>等价于<code>--filter</code></p></blockquote><p>现在我们在往<code>@packages/utils</code>中安装一个<code>dayjs</code>，命令如下：</p><div class="language-"><pre><code>pnpm --filter @packages/utils add dayjs\n</code></pre></div><h3 id="🍋-移除依赖">🍋 移除依赖</h3><div class="language-"><pre><code>pnpm -F @packages/components remove lodash\n</code></pre></div><h3 id="🍌-packagea中引用packageb">🍌 packageA中引用packageB</h3><p>现在我们就来实现package间的相互引用，首先我们在<code>@packages/utils/index.js</code>中写入如下内容：</p><div class="language-js"><pre><code><span class="token keyword">import</span> dayjs <span class="token keyword">from</span> <span class="token string">&#39;dayjs&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">format</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token string">&#39;YYYY-MM-DD&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">dayjs</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>然后我们执行如下命令：</p><div class="language-js"><pre><code>pnpm <span class="token operator">-</span><span class="token constant">F</span> @packages<span class="token operator">/</span>components add @packages<span class="token operator">/</span>utils@<span class="token operator">*</span>\n</code></pre></div><p>这个命令表示在<code>@packages/components</code>安装<code>@packages/utils</code>，其中的<code>@*</code>表示默认同步最新版本，省去每次都要同步最新版本的问题。</p><p>安装完成后<code>@packages/components/package.json</code>内容如下：</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@packages/components&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;@packages/utils&quot;</span><span class="token operator">:</span> <span class="token string">&quot;workspace: *&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;lodash&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.17.21&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>然后我们在<code>@packages/components/index.js</code>写入如下内容：</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> format <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@packages/utils&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p>然后我们在项目根目录运行如下命令</p><div class="language-js"><pre><code>node packages<span class="token operator">/</span>components\n</code></pre></div><p>即可打印出当前的日期。</p><h2 id="🍍-写在最后">🍍 写在最后</h2><p>到这这篇文章就结束了，文中的内容比较简答，可以说仅仅是Monorepo的入门，毕竟只有，入门之后才能继续深入学习嘛。</p><blockquote><p><a href="https://developer.aliyun.com/article/950982#slide-7" target="_blank" rel="noopener noreferrer">https://developer.aliyun.com/article/950982#slide-7</a></p></blockquote>',55)];p.render=function(s,a,p,t,c,u){return n(),o("div",null,e)};export default p;export{a as __pageData};
